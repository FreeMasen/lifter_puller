local puller = require 'xml-puller'
local event = require 'event'


function _assert(test, ...)
    assert(test, string.format(...))
end

describe('Puller', function ()
    describe('should parse decl', function ()
        it('with all values', function ()
            local p = puller.new('<?xml version="1.2" encoding="utf-8" standalone="no" ?>')
            local e = assert(p:next())
            _assert(e.ty == event.event_type.declaration, 'expected decl found %s', e.ty)
            _assert(e.version == '1.2', 'expected version 1.2 found %s', e.version)
            _assert(e.encoding == 'utf-8', 'expected utf-8 found %s', e.encoding)
            _assert(e.standalone == false, 'expected standalone to be false found %s', e.standalone)
        end)
    end)
    describe('should parse doctype', function()
        it('empty with all values', function ()
            local p = puller.new('<!DOCTYPE name PUBLIC "first_value" "second_value">')
            local e = assert(p:next())
            _assert(e.ty == event.event_type.doctype, 'expected empty doctype, found %s', e.ty)
            _assert(e.name == 'name', 'expected name of name found "%s"', e.name)
            _assert(e.external_id == 'PUBLIC', 'expected external_id of PUBLIC found "%s"', e.external_id)
            _assert(e.external_value[1] == 'first_value', 'expected external value first_value found "%s"', e.external_value[2])
            _assert(e.external_value[2] == 'second_value', 'expected external value second_value found "%s"', e.external_value[2])
        end)
        it('empty with SYSTEM', function ()
            local p = puller.new('<!DOCTYPE name SYSTEM "first_value">')
            local e = assert(p:next())
            _assert(e.ty == event.event_type.doctype, 'expected empty doctype, found %s', e.ty)
            _assert(e.name == 'name', 'expected name of name found "%s"', e.name)
            _assert(e.external_id == 'SYSTEM', 'expected external_id of SYSTEM found "%s"', e.external_id)
            _assert(e.external_value[1] == 'first_value', 'expected external value first_value found "%s"', e.external_value[2])
        end)
    end)
    describe('should parse comments', function()
        it('single line comment', function()
            local p = puller.new('<!-- This is a comment! -->')
            local e = assert(p:next())
            _assert(e.ty == event.event_type.comment, 'expected comment found %s', e.ty)
            _assert(e.text == ' This is a comment! ', 'bad comment text found "%s"', e.text)
        end)
    end)
    describe('should parse processing instruction', function()
        it('with content', function()
            local p = puller.new('<?target content?>')
            local e = assert(p:next())
            _assert(e.ty == event.event_type.processing_instruction, 'expected pi found %s', e.ty)
            _assert(e.target == 'target', 'bad target found "%s"', e.target)
            _assert(e.content == 'content', 'bad content found "%s"', e.content)
        end)
    end)
end)